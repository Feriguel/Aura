// ========================================================================== //
// File : scatter.comp
//
// Author : Miguel Ã‚ngelo Crespo Ferreira
// ========================================================================== //
#version 460
// Workspace settings.
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
// Structures.
struct Ray {
	vec3 origin;
	vec3 direction;
	vec3 albedo;
	uint missed;
};
struct Hit {
	vec3 point;
	float time;
	vec3 normal;
	uint m_idx;
	uint inside;
};
struct Transform {
	mat4 t;
	mat4 s;
	mat4 r;
};
struct Primitive {
	uint type;
	uint t_idx;
	uint m_idx;
	float radius;
	uvec4 vertices;
};
struct Material {
	uint type;
	vec4 colour;
	float r_idx;
	float fuzz;
};
// Layout bindings.
layout(std140, set = 0, binding = 0) uniform Settings {
	float t_min;
	float t_max;
	uint n_bounces;
	uint n_samples;
	uint n_primitives;
	uint width;
	uint height;
};
layout(std140, set = 1, binding = 0) buffer restrict Rays {
	Ray[] rays;
};
layout(std140, set = 1, binding = 1) buffer restrict Hits {
	Hit[] hits;
};
layout(std140, set = 1, binding = 2) buffer restrict writeonly Pixels {
	vec4[] pixels;
};
layout(std140, set = 2, binding = 0) buffer restrict readonly Vertices {
	vec3[] vertices;
};
layout(std140, set = 2, binding = 1) buffer restrict readonly Transforms {
	Transform[] transforms;
};
layout(std140, set = 2, binding = 2) buffer restrict readonly Materials {
	Material[] materials;
};
layout(std140, set = 2, binding = 3) buffer restrict readonly Primitives {
	Primitive[] primitives;
};
// Randomiser.
layout(push_constant) uniform Random {
	vec3 rnd_point;
	float rnd_seed;
};
// Material types.
#define BOUNDING   0
#define TEST       1
#define DIFFUSE    2
#define SPECULAR   3
#define EMISSIVE   4
// Minimum distance from origin:	0.123456789012345
#define MIN_DIST					0.0000005
// Test albedo.
vec3 test_albedo(in restrict const vec3 n)
{
	return (n + 1.0) * 0.5;
}
// Alpha albedo.
vec3 alpha_albedo(in restrict const vec3 albedo, in restrict const float alpha)
{
	return alpha * albedo + 1.0 - alpha;
}
// Background albedo.
vec3 background_albedo(in restrict const vec3 d)
{
	const float vr = (d.y + 1.0) * 0.5;
	const vec3 bottom = vec3(0.5, 0.5, 0.5) * (1.0 - vr);
	const vec3 top = vec3(1.0, 1.0, 1.0) * vr;
	return bottom + top;
}
// Diffuse reflection. Random directions above surface.
vec3 diffuse_reflection(in const vec3 n)
{
	vec3 nd = n + rnd_point;
	if (nd == vec3(0.0))
	{ return n; }
	else
	{ return nd; }
}
// Specular reflection. Uses surface normal and fuzziness constant.
vec3 specular_reflection(in const vec3 n, in const vec3 d, in const float fuzz)
{
	return reflect(d, n) + rnd_point * fuzz;
}
// Christophe Schlick approximation.
float schlick (in float cosine, in float r_idx)
{
	float r0 = (1 - r_idx) / (1 + r_idx);
	r0 = r0 * r0;
	return r0 + (1 - r0) * pow( (1 - cosine), 5 );
}
// Refraction. Uses both inside or outside situation and schlick approximation.
bool refraction(in const vec3 n, in const vec3 d, in const float r_idx,
	in const bool inside, out vec3 nd)
{
	float cosine; float prob;

	if(inside)
	{
		cosine = r_idx * dot(d, n);
		nd = refract(d, n, r_idx);
	}
	else
	{
		cosine = -dot(d, n);
		nd = refract(d, n, 1.0 / r_idx);
	}
	if(nd == vec3(0.0))
	{ prob = 1.0; }
	else
	{ prob = schlick(cosine, r_idx); }
	if (rnd_seed < prob)
	{ return false; }
	else
	{ return true; }
}
// Miss. Updates with a background definition and stops the ray. Returns
// the new pixel sample.
vec4 miss(in const uint idx, in const vec3 albedo)
{
	rays[idx].albedo *= albedo;
	rays[idx].missed = 1;
	return vec4(rays[idx].albedo, 1.0);
}
// Diffuse. Updates with the material albedo and reflects rays in random
// directions.
void diffuse(in const uint idx, in const vec3 albedo)
{
	const vec3 p = hits[idx].point;
	const vec3 n = hits[idx].normal;

	rays[idx].albedo *= albedo;
	rays[idx].direction = normalize(diffuse_reflection(n));
}
// Specular. Updates with the material albedo based on the intensity level
// and either reflect or refract the ray.
void specular(in const uint idx, in const vec3 albedo)
{
	const bool inside = bool(hits[idx].inside);
	const float alpha = materials[hits[idx].m_idx].colour.a;
	const float r_idx = materials[hits[idx].m_idx].r_idx;
	const float fuzz  = materials[hits[idx].m_idx].fuzz;
	const vec3 d = rays[idx].direction;
	const vec3 p = hits[idx].point;
	const vec3 n = hits[idx].normal;

	if (alpha < 1.0)
	{
		vec3 nd;
		if(refraction(n, d, r_idx, inside, nd))
		{ rays[idx].direction = nd; }
		else
		{ rays[idx].direction = specular_reflection(n, d, fuzz); }
		rays[idx].albedo *= alpha_albedo(albedo, alpha);
	}
	else
	{ 
		rays[idx].direction = specular_reflection(n, d, fuzz);
		rays[idx].albedo *= albedo;
	}
	rays[idx].direction = normalize(rays[idx].direction);
}
// Emissive. Updates with the material albedo based on the intensity level
// and either refract or stop the ray. Returns the new pixel sample.
vec4 emissive(in const uint idx, in const vec3 albedo)
{
	const bool inside = bool(hits[idx].inside);
	const float alpha = materials[hits[idx].m_idx].colour.a;
	const float r_idx = materials[hits[idx].m_idx].r_idx;
	const float fuzz  = materials[hits[idx].m_idx].fuzz;
	const vec3 d = rays[idx].direction;
	const vec3 p = hits[idx].point;
	const vec3 n = hits[idx].normal;

	if (alpha < 1.0)
	{
		vec3 nd;
		if(refraction(n, d, r_idx, inside, nd))
		{
			rays[idx].direction = normalize(nd);
		}
		else
		{
			rays[idx].missed = 1;
		}
		rays[idx].albedo *= alpha_albedo(albedo, alpha);
	}
	else
	{
		rays[idx].albedo *= albedo * alpha;
		rays[idx].missed = 1;
	}
	return vec4(rays[idx].albedo, 1.0);
}
// Absortion, colouring and scattering stage.
void main()
{
	if(gl_GlobalInvocationID.s >= width || gl_GlobalInvocationID.t >= height) { return; }
	const uint idx = gl_GlobalInvocationID.s + gl_GlobalInvocationID.t * width;
	if(bool(rays[idx].missed)) { return; }

	if(hits[idx].time == 0.0)
	{ 
		pixels[idx] += miss(idx, background_albedo(rays[idx].direction));
	}
	else if(materials[hits[idx].m_idx].type == TEST)
	{ 
		pixels[idx] += emissive(idx, test_albedo(hits[idx].normal));
	}
	else if(materials[hits[idx].m_idx].type == uint(DIFFUSE))
	{ 
		diffuse(idx, materials[hits[idx].m_idx].colour.rgb);
	}
	else if(materials[hits[idx].m_idx].type == SPECULAR)
	{ 
		specular(idx, materials[hits[idx].m_idx].colour.rgb);
	}
	else if(materials[hits[idx].m_idx].type == EMISSIVE)
	{ 
		pixels[idx] += emissive(idx, materials[hits[idx].m_idx].colour.rgb);
	}
	else
	{
		pixels[idx] += vec4(1.0, 0.0, 1.0, 1.0);
	}
	rays[idx].origin = hits[idx].point + MIN_DIST * rays[idx].direction;
	hits[idx].time = 0.0;
}
