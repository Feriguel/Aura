// ========================================================================== //
// File : scatter.comp
//
// Author : Miguel Ã‚ngelo Crespo Ferreira
// ========================================================================== //
#version 460
// Workspace settings.
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
// Structures.
struct Ray {
	vec3 origin;
	vec3 direction;
	vec3 albedo;
	uint missed;
};
struct Hit {
	vec3 point;
	float time;
	vec3 normal;
	uint m_idx;
	uint inside;
};
struct Material { 
	vec4 albedo;
	uint type;
	uint emissive;
	float r_idx;
	float fuzz;
};
// Layout bindings.
layout(std140, set = 0, binding = 0) uniform Settings {
	float t_min;
	float t_max;
	uint n_bounces;
	uint n_samples;
	uint n_primitives;
	uint width;
	uint height;
};
layout(std140, set = 1, binding = 0) buffer restrict Rays {
	Ray[] rays;
};
layout(std140, set = 1, binding = 1) buffer restrict Hits {
	Hit[] hits;
};
layout(std140, set = 1, binding = 2) buffer restrict writeonly Pixels {
	vec4[] pixels;
};
layout(std140, set = 2, binding = 2) buffer restrict readonly Materials {
	Material[] materials;
};
// Randomiser.
layout(push_constant) uniform Random {
	vec3 rnd_point;
	float rnd_seed;
};
// Material types.
#define BOUNDING   0
#define TEST       1
#define DIFFUSE    2
#define SPECULAR   3
// Minimum distance from origin:	0.123456789012345
#define MIN_DIST					0.0000005
// Updates ray direction by reflecting the previous ray over the surface of
// the intersected material.
vec3 reflection(
	in restrict const vec3 n, in restrict const vec3 d,
	in restrict const uint type, in restrict const float fuzz)
{
	switch(type)
	{
	case TEST:
	case DIFFUSE:
		return n + rnd_point;
	case SPECULAR:
		if (fuzz > 0.0)
		{ return reflect(d, n) + rnd_point * fuzz; }
		else
		{ return reflect(d, n); }
	default:
		return vec3(0.0);
	}
}
// Updates ray direction by reflecting the previous ray over the surface of
// the intersected material. Returns if there was a refraction
vec3 refraction(
	in restrict const vec3 n, in restrict const vec3 d,
	in restrict const uint type, in restrict const float r_idx,
	in restrict const uint inside)
{
	switch(type)
	{
	case TEST:
	case SPECULAR:
	case DIFFUSE:
		if(bool(inside))
		{
			return refract(d, n, r_idx);
		}
		else
		{
			return refract(d, n, 1.0 / r_idx);
		}
	default:
		return vec3(0.0);
	}
}
// Adds the background to the pixel colour. Currently determines a colour in
// a gradient between azure and white using the vertical ratio of the ray direction.
vec3 miss(in restrict const vec3 d)
{
	const float vr = (d.y + 1.0) * 0.5;
	const vec3 darkness = vec3(0.25, 0.25, 0.25) * (1.0 - vr);
	const vec3 sky = vec3(0.2, 0.6, 1.0) * vr;
	return darkness + sky;
}
// Determines the colour based on the hit material type and alpha component.
// Alphas below 1.0 are translucent. Only emissive materials add to the colour.
vec4 hit_opaque(
	in restrict const vec3 albedo, in restrict const vec3 n,
	in restrict const uint m_type, in restrict const uint m_emissive,
	in restrict const vec3 m_albedo, in restrict const float m_alpha)
{
	switch(m_type)
	{
		case BOUNDING:
			return vec4(1.0, 1.0, 1.0, 1.0);
		case TEST:
			if (bool(m_emissive))
			{
				return vec4((n + 1.0) * 0.5 * m_alpha * albedo, 1.0);
			}
			else
			{
				return vec4((n + 1.0) * 0.5 * albedo, 1.0);
			}
		default:
			if (bool(m_emissive))
			{
				return vec4(m_albedo * m_alpha * albedo, 1.0);
			}
			else
			{
				return vec4(m_albedo * albedo, 1.0);
			}
	}
}
// Determines the colour based on the hit material type and alpha component.
// Alphas below 1.0 are translucent. Only emissive materials add to the colour.
vec4 hit_translucent(
	in restrict const vec3 albedo, in restrict const vec3 n,
	in restrict const uint m_type, in restrict const uint m_emissive,
	in restrict const vec3 m_albedo, in restrict const float m_alpha)
{
	switch(m_type)
	{
		case BOUNDING:
			return vec4(1.0, 1.0, 1.0, 1.0);
		case TEST:
			return vec4((m_alpha * (n + 1.0) * 0.5 + 1.0 - m_alpha) * albedo, 1.0);
		default:
			return vec4((m_alpha * m_albedo + 1.0 - m_alpha) * albedo, 1.0);
	}
}
// Determines the ray colour and scatters it, if it ain't a miss.
void main()
{
	if(gl_GlobalInvocationID.s > width || gl_GlobalInvocationID.t > height) { return; }
	const uint idx = gl_GlobalInvocationID.s + gl_GlobalInvocationID.t * width;
	if(bool(rays[idx].missed)) { return; }
	vec3 nd = vec3(0.0);
	bool refracted = false;
	vec4 albedo = vec4(0.0);

	// If its a miss.
	if(hits[idx].time == 0.0)
	{
		pixels[idx] += vec4(miss(rays[idx].direction) * rays[idx].albedo, 1.0);
		rays[idx].missed = 1; 
		return;
	}
	// If its a hit, proceed according to alpha channel.
	if(materials[hits[idx].m_idx].albedo.a < 1.0)
	{
		albedo = hit_translucent(rays[idx].albedo, hits[idx].normal,
		materials[hits[idx].m_idx].type, materials[hits[idx].m_idx].emissive,
		materials[hits[idx].m_idx].albedo.rgb, materials[hits[idx].m_idx].albedo.a);
		
		nd = refraction(hits[idx].normal, rays[idx].direction,
			materials[hits[idx].m_idx].type, materials[hits[idx].m_idx].r_idx,
			hits[idx].inside);
		
		if(nd != vec3(0.0))
		{
			refracted = true;
		}
	}
	else
	{
		albedo = hit_opaque(rays[idx].albedo, hits[idx].normal,
		materials[hits[idx].m_idx].type, materials[hits[idx].m_idx].emissive,
		materials[hits[idx].m_idx].albedo.rgb, materials[hits[idx].m_idx].albedo.a);	
	}
	if (!bool(materials[hits[idx].m_idx].emissive) && !refracted)
	{
		nd = reflection(hits[idx].normal, rays[idx].direction,
			materials[hits[idx].m_idx].type, materials[hits[idx].m_idx].fuzz);
	}
	if(bool(materials[hits[idx].m_idx].emissive))
	{
		pixels[idx] += albedo;
		if(nd == vec3(0.0))
		{
			rays[idx].missed = 1;
			return;
		}
	}
	else if(nd == vec3(0.0))
	{
		rays[idx].origin = hits[idx].point + MIN_DIST * rays[idx].direction;
		hits[idx].time = 0.0;
		return;
	}
	else
	{
		rays[idx].direction = normalize(nd);
		rays[idx].origin = hits[idx].point + MIN_DIST * rays[idx].direction;
		rays[idx].albedo = vec3(albedo);
		hits[idx].time = 0.0;
	}
}
