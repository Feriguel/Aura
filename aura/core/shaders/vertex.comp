// ========================================================================== //
// File : intersect.comp
//
// Author : Miguel Ã‚ngelo Crespo Ferreira
// ========================================================================== //
#version 460
// Workspace settings.
layout(local_size_x = 8, local_size_y = 1, local_size_z = 1) in;
// Structures.
struct Transform {
	mat4 t;
	mat4 s;
	mat4 r;
};
struct Primitive {
	uint type;
	uint t_idx;
	uint m_idx;
	float radius;
	uvec4 vertices;
};
struct Material {
	vec4 colour;
	uint type;
	float r_idx;
	float fuzz;
};
// Layout bindings.
layout(std140, set = 0, binding = 0) uniform Settings {
	float t_min;
	float t_max;
	uint n_bounces;
	uint n_samples;
	uint n_primitives;
	uint width;
	uint height;
};
layout(std140, set = 1, binding = 0) buffer restrict Vertices {
	vec3[] vertices;
};
layout(std140, set = 1, binding = 1) buffer restrict readonly Transforms {
	Transform[] transforms;
};
layout(std140, set = 1, binding = 2) buffer restrict readonly Materials {
	Material[] materials;
};
layout(std140, set = 1, binding = 3) buffer restrict Primitives {
	Primitive[] primitives;
};
// Primitive types:
#define EMPTY		0
#define SPHERE		1
#define CUBOID		2
#define TRIANGLE	3
// Cycles trough all primitives and checks for intersections. Stores the closest
// hit on the hit structure respective to the ray.
void main()
{
	if(gl_GlobalInvocationID.x >= n_primitives) { return; }
	const uint idx = gl_GlobalInvocationID.x;
	
	const restrict Transform transform = transforms[primitives[idx].t_idx];
	const vec4 v0 = vec4(vertices[primitives[idx].vertices.x], 1.0);
	const vec4 v1 = vec4(vertices[primitives[idx].vertices.y], 1.0);
	const vec4 v2 = vec4(vertices[primitives[idx].vertices.z], 1.0);
	const float r = primitives[idx].radius;
	switch(primitives[idx].type)
	{
		case SPHERE:
		{
			const mat4 trf = transform.t * transform.r;
			vertices[primitives[idx].vertices.x] = vec3(trf * v0);
			const vec4 r_tmp = transform.s * vec4(r, r, r, 1.0);
			primitives[idx].radius = (r_tmp.x + r_tmp.y + r_tmp.z) / 3;
			return;
		}
		case CUBOID:
		{
			const mat4 trf = transform.t * transform.s;
			vertices[primitives[idx].vertices.x] = vec3(trf * v0);
			vertices[primitives[idx].vertices.y] = vec3(trf * v1);
			return;
		}
		case TRIANGLE:
		{
			const mat4 trf = transform.t * transform.r * transform.s;
			vertices[primitives[idx].vertices.x] = vec3(trf * v0);
			vertices[primitives[idx].vertices.y] = vec3(trf * v1);
			vertices[primitives[idx].vertices.z] = vec3(trf * v2);
			return;
		}
		default:
			return;
	}
}